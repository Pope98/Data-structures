#ifndef AVL_H
#define AVL_H

typedef struct node
{
    int height;
    int data;
    struct node* left;
    struct node* right;
}node;


void dispose(node* t);
node* find( int e, node *t );
node* find_min( node *t );
node* find_max( node *t );
node* insert( int data, node *t );
node* del( node* t, int val );
node * del_min(node* t, int val);
void display_avl(node* t);
int get( node* n );

#endif


// AVL.C

#include <stdio.h>
#include "avl.h"

// Panaikina visus laukus is AVL
void dispose(node* t)
{
    if( t != NULL )
    {
        dispose( t->left );
        dispose( t->right );
        free( t );
    }
}

// iesko pasirinktos reiksmes AVL medyje
node* find(int val, node* t )
{
    if( t == NULL )
        return NULL;
    if( val < t->data )
        return find( val, t->left );
    else if( val > t->data )
        return find( val, t->right );
    else
        return t;
}

// randa maziausia laukelio reiksme
node* find_min( node* t )
{
    if( t == NULL )
        return NULL;
    else if( t->left == NULL )
        return t;
    else
        return find_min( t->left );
}

// randa didziausia laukelio reiksme
node* find_max( node* t )
{
    if( t != NULL )
        while( t->right != NULL )
            t = t->right;

    return t;
}

// randa laukelio auksti
static int height( node* n )
{
    if( n == NULL )
        return -1;
    else
        return n->height;
}

// randa didesne reiksme
static int max( int l, int r)
{
    return l > r ? l: r;
}


//atlieka apkeitima tarp laukelio k2 ir kairiojo vaikinio laukelio
//!single_rotate_with_left() naudojamas tik tada, kai egzistuoja kairysis vaikinis laukelis
static node* single_rotate_with_left( node* k2 )
{
    node* k1 = NULL;

    k1 = k2->left;
    k2->left = k1->right;
    k1->right = k2;

    k2->height = max( height( k2->left ), height( k2->right ) ) + 1;
    k1->height = max( height( k1->left ), k2->height ) + 1;
    return k1; // grazina nauja sakni
}

//atlieka apkeitima tarp laukelio k1 ir desiniojo vaikinio laukelio
//!single_rotate_with_right() naudojamas tik tada, kai egzistuoja desinysis vaikinis laukelis
static node* single_rotate_with_right( node* k1 )
{
    node* k2;

    k2 = k1->right;
    k1->right = k2->left;
    k2->left = k1;

    k1->height = max( height( k1->left ), height( k1->right ) ) + 1;
    k2->height = max( height( k2->right ), k1->height ) + 1;

    return k2;  // grazina nauja sakni
}


//atliekamas apkeitimas is kaires i desine
//!double_rotate_with_left() naudojamas tik tada, kai laukelis k3 turi kairiji vaikini laukeli, kuris turi desiniji vaikini laukeli
static node* double_rotate_with_left( node* k3 )
{
    // apkeitimas tarp k1 ir k2
    k3->left = single_rotate_with_right( k3->left );

    // apkeitimas tarp k3 ir k2
    return single_rotate_with_left( k3 );
}

//atliekamas apkeitimas is desines i kaire
//!double_rotate_with_right() naudojamas tik tada, kai laukelis k1 turi desiniji vaikini laukeli, kuris turi kairiji vaikini laukeli

static node* double_rotate_with_right( node* k1 )
{
    // apkeitimas tarp k3 ir k2
    k1->right = single_rotate_with_left( k1->right );

    // apkeitimas tarp k1 ir k2
    return single_rotate_with_right( k1 );
}

// iterpiamas naujas laukelis i AVL
node* insert(int val, node* t )
{
    if( t == NULL )
    {
        // sukuriamas vieno laukelio medis
        t = (node*)malloc(sizeof(node));
        if( t == NULL )
        {
            fprintf (stderr, "Memory shortage!\n");
            exit(1);
        }
        else
        {
            t->data = val;
            t->height = 0;
            t->left = t->right = NULL;
        }
    }
    else if( val < t->data )
    {
        t->left = insert( val, t->left );
        if( height( t->left ) - height( t->right ) == 2 )
            if( val < t->left->data )
                t = single_rotate_with_left( t );
            else
                t = double_rotate_with_left( t );
    }
    else if( val > t->data )
    {
        t->right = insert( val, t->right );
        if( height( t->right ) - height( t->left ) == 2 )
            if( val > t->right->data )
                t = single_rotate_with_right( t );
            else
                t = double_rotate_with_right( t );
    }
    // kitu atveju, reiksme jau yra AVL
    t->height = max( height( t->left ), height( t->right ) ) + 1;
    return t;
}

// istrinamas laukelis is AVL

node* del(node*t, int val)
{
    if(!(t))
        return t;
    if(val < t->data)
        t->left = del(t->left, val);
    else
        if(val > t->data)
            t->right = del(t->right, val);
        else
            if((t->left) && (t->right))
            {
                node *tmp  = find_min(t->right);
                t->data = tmp->data;
                if(t->right->left)
                    t->right = del(t->right,t->right->left->data);
                else t->right = del(t->right,t->right->data);
                free(tmp);

            }
            else
                if(t->left)
                    t = t->left;
                else
                    t = t->right;
    return t;
}


int get(node* n)
{
    return n->data;
}

// Atspausdinamas AVL medis
void display_avl(node* t)
{
    if (t == NULL)
        return;
    printf("%d",t->data);

    if(t->left != NULL)
        printf("(L:%d)",t->left->data); // kaireje
    if(t->right != NULL)
        printf("(R:%d)",t->right->data); // desineje
    printf("\n");

    display_avl(t->left);
    display_avl(t->right);
}

// MAIN.C

#include <stdio.h>
#include "avl.h"

int main()
{
    node *t;
    int j = 0;
    const int max = 10;
    printf("---  AVL Tree  ---\n");
    t = NULL;
    printf("values in tree: ");

    for( int i = 0; i < max; i++, j = ( j + 7 ) % max )
    {

        // iterpiami skaiciai nuo 1-20
        t = insert( j, t );
        printf("%d ",j);

    }

    t = insert(1, t);
    t = insert(3, t);
    t = insert(5, t);
    t = insert(7, t);
    t = insert(9, t);
    printf("\n");
    display_avl(t);
    t = del(t, 3);
    t = del(t, 2);
    t = del(t, 0);
    printf("\n");
    display_avl(t);
    // istrinamas medis (atlaisvinama atmintis)
    dispose(t);
    return 0;
}


